`timescale 1ns/1ps
`include "cs_constants.v"

module sram_single_port_2_addr
(
	input 						 clk,
	input  [`PACKET_LEN-1:0] data,
	input  [`ADDR_WIDTH-1:0] addr_x,
	input  [`ADDR_WIDTH-1:0] addr_y,
	
	input  [`DATA_WIDTH-1:0] candidate_position_request_top_left_x,
	input  [`DATA_WIDTH-1:0] candidate_position_request_top_middle_x,
	input  [`DATA_WIDTH-1:0] candidate_position_request_top_right_x,
	input  [`DATA_WIDTH-1:0] candidate_position_request_middle_left_x,
	input  [`DATA_WIDTH-1:0] candidate_position_request_middle_right_x,
	input  [`DATA_WIDTH-1:0] candidate_position_request_bottom_left_x,
	input  [`DATA_WIDTH-1:0] candidate_position_request_bottom_middle_x,
	input  [`DATA_WIDTH-1:0] candidate_position_request_bottom_right_x,
	
	input  [`DATA_WIDTH-1:0] candidate_position_request_top_left_y,
	input  [`DATA_WIDTH-1:0] candidate_position_request_top_middle_y,
	input  [`DATA_WIDTH-1:0] candidate_position_request_top_right_y,
	input  [`DATA_WIDTH-1:0] candidate_position_request_middle_left_y,
	input  [`DATA_WIDTH-1:0] candidate_position_request_middle_right_y,
	input  [`DATA_WIDTH-1:0] candidate_position_request_bottom_left_y,
	input  [`DATA_WIDTH-1:0] candidate_position_request_bottom_middle_y,
	input  [`DATA_WIDTH-1:0] candidate_position_request_bottom_right_y,
	
	input 						 we,
	
	output [`DATA_WIDTH-1:0] candidate_value_top_left,
	output [`DATA_WIDTH-1:0] candidate_value_top_middle,
	output [`DATA_WIDTH-1:0] candidate_value_top_right,
	
	output [`DATA_WIDTH-1:0] candidate_value_middle_left,
	output [`DATA_WIDTH-1:0] candidate_value_middle_right,
	
	output [`DATA_WIDTH-1:0] candidate_value_bottom_left,
	output [`DATA_WIDTH-1:0] candidate_value_bottom_middle,
	output [`DATA_WIDTH-1:0] candidate_value_bottom_right
);
// Declare the RAM variable
reg [`PACKET_LEN-1:0] ram[45:0][80:0];

// Variable to hold the registered read address
reg [`ADDR_WIDTH-1:0] addr_reg_x;
reg [`ADDR_WIDTH-1:0] addr_reg_y;

always@(posedge clk)
begin
	// Write
	if (we) begin
		ram[addr_x][addr_y] <= data;
		addr_reg_x 			  <= addr_x;
		addr_reg_y 			  <= addr_y;
	end
end

// Continuous assignment implies read returns NEW data.
// This is the natural behavior of the TriMatrix memory
// blocks in Single Port mode.  
assign candidate_value_top_left 	    = ram[candidate_position_request_top_left_x][candidate_position_request_top_left_y];
assign candidate_value_top_middle    = ram[candidate_position_request_top_middle_x][candidate_position_request_top_middle_y];
assign candidate_value_top_right     = ram[candidate_position_request_top_right_x][candidate_position_request_top_right_y];
	
assign candidate_value_middle_left   = ram[candidate_position_request_middle_left_x][candidate_position_request_middle_left_y];
assign candidate_value_middle_right  = ram[candidate_position_request_middle_right_x][candidate_position_request_middle_right_y];
	
assign candidate_value_bottom_left   = ram[candidate_position_request_bottom_right_x][candidate_position_request_bottom_right_y];
assign candidate_value_bottom_middle = ram[candidate_position_request_bottom_right_x][candidate_position_request_bottom_right_y];
assign candidate_value_bottom_right  = ram[candidate_position_request_bottom_right_x][candidate_position_request_bottom_right_y];

endmodule
